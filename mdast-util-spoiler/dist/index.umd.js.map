{"version":3,"file":"index.umd.js","sources":["../src/fromMarkdown.ts","../src/toMarkdown.ts"],"sourcesContent":["import * as Uni from 'unist';\nimport { MdastExtension } from 'mdast-util-from-markdown/types';\n\n////////////////////////////////////////////////////////////\n\nexport interface SpoilerNode extends Uni.Literal {\n  type: 'spoiler';\n  value: string;\n}\n\n////////////////////////////////////////////////////////////\n\nexport const spoilerFromMarkdown: MdastExtension = {\n  enter: {\n    spoiler: enterSpoiler,\n  },\n  exit: {\n    spoiler: exitSpoiler,\n    spoilerText: exitSpoilerText,\n  },\n} as MdastExtension;\n\n////////////////////////////////////////////////////////////\n\nfunction top<T>(stack: T[]) {\n  return stack[stack.length - 1];\n}\n\nfunction enterSpoiler(this: any, token: unknown) {\n  this.enter(\n    {\n      type: 'spoiler',\n      value: null,\n    },\n    token\n  );\n}\n\nfunction exitSpoiler(this: any, token: unknown) {\n  this.exit(token);\n}\n\nfunction exitSpoilerText(this: any, token: unknown) {\n  const currentNode = top(this.stack) as SpoilerNode;\n  currentNode.value = this.sliceSerialize(token);\n}\n","// mdast\nimport { Unsafe, Handle, Context } from 'mdast-util-to-markdown';\n\n// unist\nimport * as Uni from 'unist';\n\n// project imports\nimport { SpoilerNode } from './fromMarkdown';\n\n////////////////////////////////////////////////////////////\n\nexport interface SpoilerToMarkdownOptions {}\n\n////////////////////////////////////////////////////////////\n\n/**\n * @warning Does no validation.  Garbage in, garbage out.\n */\nexport function spoilerToMarkdown(options: Partial<SpoilerToMarkdownOptions> = {}) {\n  const unsafe: Unsafe[] = [{ character: '|', inConstruct: ['spoilerText'] }];\n\n  /** Replaces the spoiler node with `node.value`, without escaping. */\n  function handler(node: SpoilerNode, _: Uni.Parent | null | undefined, context: Context): string {\n    return `||${node.value}||`;\n  }\n\n  return {\n    unsafe: unsafe,\n    handlers: {\n      // as of (2021-05-07), the typings for Handle do not reflect\n      // that the handler will be passed nodes of a specific type\n      spoiler: handler as unknown as Handle,\n    },\n  };\n}\n"],"names":[],"mappings":"AAUA;IAEa,mBAAmB,GAAmB;AACjD,EAAA,KAAK,EAAE;AACL,IAAA,OAAO,EAAE;AADJ,GAD0C;AAIjD,EAAA,IAAI,EAAE;AACJ,IAAA,OAAO,EAAE,WADL;AAEJ,IAAA,WAAW,EAAE;AAFT;AAJ2C;;AAYnD,SAAS,GAAT,CAAgB,KAAhB,EAA0B;AACxB,SAAO,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAZ;AACD;;AAED,SAAS,YAAT,CAAiC,KAAjC,EAA+C;AAC7C,OAAK,KAAL,CACE;AACE,IAAA,IAAI,EAAE,SADR;AAEE,IAAA,KAAK,EAAE;AAFT,GADF,EAKE,KALF;AAOD;;AAED,SAAS,WAAT,CAAgC,KAAhC,EAA8C;AAC5C,OAAK,IAAL,CAAU,KAAV;AACD;;AAED,SAAS,eAAT,CAAoC,KAApC,EAAkD;AAChD,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,KAAN,CAAvB;AACA,EAAA,WAAW,CAAC,KAAZ,GAAoB,KAAK,cAAL,CAAoB,KAApB,CAApB;AACD;;AChCD;;AAEA;;AAEG;AACG,SAAU,iBAAV,GAA2E;AAC/E,MAAM,MAAM,GAAa,CAAC;AAAE,IAAA,SAAS,EAAE,GAAb;AAAkB,IAAA,WAAW,EAAE,CAAC,aAAD;AAA/B,GAAD,CAAzB;AAEA;;AACA,WAAS,OAAT,CAAiB,IAAjB,EAAoC,CAApC,EAAsE,OAAtE,EAAsF;AACpF,uBAAY,IAAI,CAAC,KAAjB;AACD;;AAED,SAAO;AACL,IAAA,MAAM,EAAE,MADH;AAEL,IAAA,QAAQ,EAAE;AACR;AACA;AACA,MAAA,OAAO,EAAE;AAHD;AAFL,GAAP;AAQD;;;;"}